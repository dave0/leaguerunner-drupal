<?php
/**
 * @file
 * This module injects itself into Drupal's Authentication stack.
 */

/**
 * Implements hook_menu()
 */
function leaguerunner_authentication_menu()
{
	$items = array();

	$items['admin/config/leaguerunner'] = array(
		'title' => 'Leaguerunner',
		'description' => 'Settings for Leaguerunner.',
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('access administration pages'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system')
	);
	$items['admin/config/leaguerunner/leaguerunner_authentication'] = array(
		'title' => 'Leaguerunner settings',
		'description' => 'Configure relevant settings for Leaguerunner integration',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('leaguerunner_authentication_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'weight' => 0,
		'file'  => 'leaguerunner_authentication.admin.inc',
		'file path' => drupal_get_path('module', 'leaguerunner_authentication'),
		'type' => MENU_NORMAL_ITEM

	);
	$items['admin/config/leaguerunner/leaguerunner_authentication/default'] = array(
		'title' => 'Leaguerunner',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0,
	);


	return $items;
}

/**
 * Implements hook_menu_alter().
 */
function leaguerunner_authentication_menu_alter(&$items)
{
	$items['user/password']['access callback'] = 'leaguerunner_authentication_show_reset_pwd';
}

function leaguerunner_authentication_theme()
{
	return array(
		'leaguerunner_authentication_user_login_block_links' => array(
			'render element' => 'element',
		),
		'leaguerunner_authentication_user_pass_message' => array(
			'render element' => 'element',
		),
		'leaguerunner_authentication_user_pass_validate_leaguerunner_authenticated' => array(
			'render element' => 'element',
		),
	);
}
/**
 * Implements hook_help().
 */
function leaguerunner_authentication_help($path, $arg)
{
	$authentication_help = t('Leaguerunner authentication allows authentication against a Leaguerunner
		installation running on the same host');

	switch ($path) {
		case 'admin/config/leaguerunner_authentication/settings':
			$output = '<p>' . $authentication_help . '</p>';
			return $output;

		case 'admin/help#leaguerunner_authentication':
			$output = '<p>' . $authentication_help . '</p>';
			return $output;
	}
}

/**
 * Implements hook_info().
 */
function leaguerunner_authentication_info($field = 0)
{
	$info['name']     = 'leaguerunner_authentication';
	$info['protocol'] = 'HTTP';

	if ($field) {
		return $info[$field];
	}

	return $info;
}


/**
 *
 * @param object $user
 * @return boolean
 *    true if user is recorded as leaguerunner authenticated and identified 
 */
function leaguerunner_authentication_leaguerunner_authenticated($user)
{
	if (is_numeric($user)) {
		$user = @user_load((int)$user);
	}
	if (!is_object($user) || $user->uid == 0) {
		return FALSE;
	}

	$authmaps = user_get_authmaps($user->name);
	return isset($authmaps['leaguerunner_authentication']);
}

function leaguerunner_authentication_show_reset_pwd($user = NULL)
{
	if (!$user) {
		global $user;
	}

	if (current_path() == 'user/password' || $user->uid == 1) {
		// always show at user/passwordurl. otherwise user 1 will not be able to reset password.
		// LDAP_authen.login_forms.MM.user1, LDAP_authen.login_forms.EM.user1
		return TRUE;
	}

	if ($user->uid == 0) {
		// hide reset password for anonymous users
		return FALSE;
	} else {
		// authenticated user.  hide if leaguerunner authenticated otherwise show.
		return (!leaguerunner_authentication_leaguerunner_authenticated($user));
	}

}

/**
 * Implements hook_form_FORM_ID_alter().
 */

function leaguerunner_authentication_form_user_pass_alter(&$form, $form_state)
{
	// the following could be in a theme preproces function
	$form['leaguerunner_warning'] = array(
		'#type' => 'item',
		'#markup' => theme('leaguerunner_authentication_user_pass_message'),
		'#weight' => 10,
	);

	// need to insert before user_pass_validate
	array_unshift($form['#validate'], 'leaguerunner_authentication_user_pass_validate');
}


function leaguerunner_authentication_user_pass_validate(&$form_state)
{
	$name_or_mail = trim($form_state['name']['#value']);
	if (! $account = user_load_by_mail($name_or_mail)) {
		$account = user_load_by_name($name_or_mail);
	}

	if (leaguerunner_authentication_leaguerunner_authenticated($account)) {
		form_set_error('name', theme('leaguerunner_authentication_user_pass_validate_leaguerunner_authenticated'));
	}
}

/**
 * Implements hook_form_FORM_ID_alter(). for user_profile_form
 */
function leaguerunner_authentication_form_user_profile_form_alter(&$form, $form_state)
{

	// keep in mind admin may be editing another users profile form.  don't assume current global $user
	if (leaguerunner_authentication_leaguerunner_authenticated($form['#user'])) {
		// Always hide email field; it's a Leaguerunner preference to enable
		// viewing based on user permissions and team membership, so we don't
		// want to display in Drupal.
		$form['account']['mail']['#type'] = 'hidden';


		// Conditionally remove the password change fields, if this is a
		// LR-authed user.
		if (!leaguerunner_authentication_show_reset_pwd($form['#user'])) {
			unset($form['account']['current_pass']);
			unset($form['account']['pass']);
		}
	}
}


/**
 * Implements hook_form_FORM_ID_alter(). for user_login
 */
function leaguerunner_authentication_form_user_login_alter(&$form, &$form_state) {
	_leaguerunner_authentication_login_form_alter($form, $form_state, 'user_login');
}

/**
 * Implements hook_form_FORM_ID_alter(). for user_login_block
 */
function leaguerunner_authentication_form_user_login_block_alter(&$form, &$form_state) {
	_leaguerunner_authentication_login_form_alter($form, $form_state, 'user_login_block');
}

/**
 * hook_user is gone in drupal 7 so functionality can be replaced by
 * altering login form submit and validate functions
 * http://drupal.org/update/modules/6/7#remove_op
 *
 * if form is being generated on non https and is set in preferences, set warning and end form development
 *   add submit functions to form
 *   - make sure submit function is in the correct order; that is if leaguerunner precedes drupal, make _leaguerunner_authn_login_form_submit first.
 *   do not remove other authentication submit functions, just reorder.
 */
function _leaguerunner_authentication_login_form_alter(&$form, &$form_state, $form_id)
{
	/**
	 * add validate function to test for leaguerunner authentication
	 * should be placed after user_login_authenticate_validate
	 * 1. user_login_name_validate
	 * 2. user_login_authenticate_validate
	 * 3. external authentication validate functions
	 * 4. user_login_final_validate
	 *
	 * as articulated above user_login_default_validators() in user.module
	 *
	 * without any other external authentication modules, this array will start out as:
	 *    array('user_login_name_validate', 'user_login_authenticate_validate', 'user_login_final_validate')
	 */
	if (@in_array('user_login_authenticate_validate', $form['#validate'])) {
		$new_validation_sequence = array();
		foreach ($form['#validate'] as $validate_function_name) {
			if ($validate_function_name == 'user_login_authenticate_validate') {
				$new_validation_sequence[] = 'user_login_authenticate_validate';
				$new_validation_sequence[] = 'leaguerunner_authentication_user_login_authenticate_validate';
			} else {
				$new_validation_sequence[] = $validate_function_name;
			}
		}
		$form['#validate'] = $new_validation_sequence;
	}

	if ($form_id == 'user_login_block') {
		$form['links']['#markup'] = theme('leaguerunner_authentication_user_login_block_links');
	}
}

function _get_leaguerunner_cookie ( )
{
	if( array_key_exists( 'leaguerunner', $_COOKIE ) ) {
		$c = $_COOKIE['leaguerunner'];
	}

	// No value present in 'leaguerunner' cookie, so create a new one
	if( empty($c) ) {
		$c = session_id();
	}

	return $c;
}

function _leaguerunner_url ( $path )
{
	return join('/', array(
		variable_get('leaguerunner_base_url'),
		$path)
	);
}

function _leaguerunner_api_url ( $path )
{
	return _leaguerunner_url( join('/', array(
		'api',
		'2',
		$path)
	));
}

function _curl_request( $path, $cookie = null, $postfields = null )
{
	if( is_null($cookie) ) {
		$cookie = _get_leaguerunner_cookie();
	}

	// Authenticate
	$curl = curl_init();
	curl_setopt($curl, CURLOPT_URL, _leaguerunner_api_url( $path ) );
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 1);


	// TODO: Configurable cookie name?
	curl_setopt($curl, CURLOPT_COOKIE, 'leaguerunner=' . $cookie);

	if( ! is_null($postfields) ) {
		curl_setopt($curl, CURLOPT_POST, TRUE);
		curl_setopt($curl, CURLOPT_POSTFIELDS, $postfields );
	}

	if( ! $xml = curl_exec( $curl ) ) {
		$watchdog_tokens['%curl_error'] = curl_error();
		if ($detailed_watchdog_log) {
			watchdog('leaguerunner_authentication', '%username : Failed with error: %curl_error', $watchdog_tokens, WATCHDOG_DEBUG);
		}
		form_set_error('name', 'Failed to authenticate against Leaguerunner');
		curl_close($curl);
		return FALSE;
	}
	curl_close($curl);

	$xmlObj = simplexml_load_string($xml);

	return $xmlObj;
}

/**
 * validate function for user logon forms.

 * user form validation will take care of username, pwd fields
 *
 * this may validate if the user exists in leaguerunner in the case of using
 * leaguerunner authentication exclusively
 */
function leaguerunner_authentication_user_login_authenticate_validate($form, &$form_state)
{
	$detailed_watchdog_log = variable_get('leaguerunner_help_watchdog_detail', 0);
	$name = $form_state['values']['name'];
	$pass = $form_state['values']['pass'];
	$watchdog_tokens = array('%username' => $name);

	if (isset($form_state['uid']) && is_integer($form_state['uid'])) {
		if ($form_state['uid'] == 1) {
			if ($detailed_watchdog_log) {
				watchdog('leaguerunner_authentication', '%username : Previously authenticated as uid=1', $watchdog_tokens, WATCHDOG_DEBUG);
			}
			return;  // already passed previous authentication validation
		} else {
			if ($detailed_watchdog_log) {
				watchdog('leaguerunner_authentication', '%username : Previously authenticated in exclusive mode or uid is not 1.  Clear uid in form_state and attempt leaguerunner authentication.',  $watchdog_tokens, WATCHDOG_DEBUG);
			}
			$form_state['uid'] = NULL;  // passed previous authentication, but only leaguerunner should be used
		}
	}

	if ($detailed_watchdog_log) {
		watchdog('leaguerunner_authentication', '%username : user_load_by_name(%username)', $watchdog_tokens, WATCHDOG_DEBUG);
	}

	$account = user_load_by_name($name);
	if (is_object($account)) {
		if ($account->uid == 1) {
			if ($detailed_watchdog_log) {
				watchdog('leaguerunner_authentication',  '%username : Drupal username maps to user 1, so do not authenticate with leaguerunner', $watchdog_tokens, WATCHDOG_DEBUG);
			}
			return FALSE;  // user 1 must use drupal authentication
		} else {
			$account_exists = TRUE;
			$user_data = $account->data;
			$authmaps = user_get_authmaps($name);
			$leaguerunner_authentication_authmap = isset($authmaps['leaguerunner_authentication']);
			if ($detailed_watchdog_log) {
				watchdog('leaguerunner_authentication',  '%username : Drupal User Account found.  Continuing on to attempt leaguerunner authentication', $watchdog_tokens, WATCHDOG_DEBUG);
			}
		}
	} else {  // account does not exist
		$account_exists = FALSE;
		if ($detailed_watchdog_log) {
			watchdog('leaguerunner_authentication', '%username : Existing Drupal User Account not found.  Continuing on to attempt leaguerunner authentication', $watchdog_tokens, WATCHDOG_DEBUG);
		}
	}

	$lr_session_id = _get_leaguerunner_cookie();

	$xmlObj = _curl_request(
		'login',
		$lr_session_id,
		array(
			'username'    => $name,
			'password'    => $pass,
			'remote_addr' => $_SERVER['REMOTE_ADDR']
		)
	);

	// Check result
	if( ! $xmlObj ) {
		form_set_error('name', 'Login failed: no XML result obtained');
		return FALSE;
	}
	if( $xmlObj->auth->status != 'ok' ) {
		form_set_error('name', 'Login failed: ' . $xmlObj->auth->error);
		return FALSE;
	}

	// OK, we're in, and have XML data containing the user's full name and possibly other info

	/**
	* case 1: previously drupal authenticated user authenticated successfully on leaguerunner
	*
	*/
	if (!$account_exists) {
		/**
		 *
		 * new leaguerunner_authentication provisioned account could let user_external_login_register create the account and set authmaps, but would need
		 * to add mail and any other user->data data in
		 * hook_user_presave which would mean requerying the db or
		 * having a global variable.  At this point the account does
		 * not exist, so there is no reason not to create it here.
		 */
		$account = leaguerunner_create_drupal_account($name, $xmlObj->auth );
		if ($account === FALSE) {
			// TODO need to throw error that account was not created
		}
	} else {  // account already exists
		if ($leaguerunner_authentication_authmap == FALSE) {
			// add leaguerunner_authentication authmap to user.  account name is fine here
			user_set_authmaps($account, array('authname_leaguerunner_authentication' => $name));
			if ($detailed_watchdog_log) {
				watchdog('leaguerunner_authentication', 'set authmap for %username authname_leaguerunner_authentication', $watchdog_tokens, WATCHDOG_DEBUG);
			}
		}

		// Update the Drupal db with any changed LR data
		leaguerunner_update_drupal_account($account, $xmlObj->auth);
	}

	/**
	* we now have valid, leaguerunner authenticated username with an account authmapped to leaguerunner_authentication.
	* since user_external_login_register can't deal with user mail attribute and doesn't do much else, it is not
	* being used here.
	*/

	setrawcookie('leaguerunner', $lr_session_id, 0, '/', variable_get('leaguerunner_cookie_domain') );

	/**
	* without doing the user_login_submit,
	* [#1009990]
	*
	*/
	$fake_form_state['uid'] = $account->uid;

	user_login_submit(array(), $fake_form_state);
	global $user;
	$form_state['uid'] = $user->uid;
	return;
}

/**
 * returns new user account if created, otherwise integer error message
 */
function leaguerunner_create_drupal_account($name, $userinfo, $edit = array())
{
	# Forced stringification to avoid SimpleXMLObject serialization later
	$mail = '' . $userinfo->mail;
	$fullname = $userinfo->firstname . ' ' . $userinfo->lastname;

	$edit['name'] = $name;
	$edit['pass'] = user_password(20);
	$edit['mail'] = $mail;
	$edit['init'] = $mail;

	// TODO: must have Field module configured with a field_fullname.
	// should this module force in its own field name?
	$edit['field_fullname'] = array( 'und' => array( '0' => array('value' => $fullname )));
	$edit['status'] = 1;

	// save 'init' data to know the origin of the leaguerunner authentication provisioned account
	$edit['data']['leaguerunner_authentication']['init'] = array(
		'name' => $name,
		'mail' => $mail
	);

	if (!$account = user_save( NULL, $edit)) {
		drupal_set_message(t('User account creation failed because of system problems.'), 'error');
		return FALSE;
	}
	return $account;
}

function leaguerunner_update_drupal_account($account, $userinfo, $edit = array())
{
	# Forced stringification to avoid SimpleXMLObject serialization later
	$edit['mail'] = '' . $userinfo->mail;

	// TODO: must have Field module configured with a field_fullname.
	// should this module force in its own field name?
	$fullname = $userinfo->firstname . ' ' . $userinfo->lastname;
	$edit['field_fullname'] = array( 'und' => array( '0' => array('value' => $fullname )));

	if (!$account = user_save( $account, $edit)) {
		drupal_set_message(t('User account update failed because of system problems.'), 'error');
		return FALSE;
	}
	return $account;
}

/**
 * Returns HTML for user login block links.
 * @param none
 *
 * @ingroup themeable
 */
function theme_leaguerunner_authentication_user_login_block_links()
{
	$items = array(
		l(t('Create new account'), _leaguerunner_url('person/create'), array('attributes' => array('title' => t('Create a new user account.')))),
		l(t('Request new password'), _leaguerunner_url('person/forgotpassword'), array('attributes' => array('title' => t('Request new password via e-mail.')))),
	);

	return theme('item_list', array('items' => $items));
}

/**
 * Returns HTML warning text for request new password/password reset form.
 * @param none
 *
 * @ingroup themeable
 */
function theme_leaguerunner_authentication_user_pass_message()
{
	return t('This page is only useful for the site administrator.  All other users need to reset their passwords in Leaguerunner');
}

/**
 * Returns HTML warning text when an leaguerunner authenticated user tries to reset their password.
 * @param none
 *
 * @ingroup themeable
 */
function theme_leaguerunner_authentication_user_pass_validate_leaguerunner_authenticated ( )
{
	// already know user exists and is leaguerunner authenticated

	$lr_pw_reset = _leaguerunner_url('person/forgotpassword');
	return t('You may not reset your password here.  You must reset your password via the directions at')
		. ' ' . l($lr_pw_reset, $lr_pw_reset);
}


/**
 * Implements hook_user_logout()
 */
function leaguerunner_authentication_user_logout($account)
{
	user_error('processing user_logout event');

	$xmlObj = _curl_request( 'logout');

	// Check result
	if( ! $xmlObj ) {
		form_set_error('name', 'Logout failed: no XML result obtained');
		return FALSE;
	}
	if( $xmlObj->auth->status != 'ok' ) {
		form_set_error('name', 'Logout failed: ' . $xmlObj->auth->error);
		return FALSE;
	}
	setrawcookie('leaguerunner', '', time() - 86400, '/', variable_get('leaguerunner_cookie_domain') );

	return TRUE;
}

/** 
 * Blocks
 */

/**
 * Implements hook_block_info()
 */
function leaguerunner_authentication_block_info() 
{
	$blocks['user_games'] = array(
		'info' => t("Sidebar block for logged-in user's upcoming games"),
		'cache' => DRUPAL_NO_CACHE
	);

	$blocks['games_today'] = array(
		'info' => t("Banner block for total number of games today"),
	);

  	return $blocks;
}

/**
 * Implements hook_block_view()
 */
function leaguerunner_authentication_block_view ( $delta = '' )
{
	global $user; 

	$block = array();

	switch ($delta) {
		case 'user_games':
			if ($user->uid) {
				$block['subject'] = 'Upcoming Games';
				$block['content'] = '<iframe name="lr_block_iframe" id="lr_block_iframe" width="200" height="200" src="' . _leaguerunner_url('api/1/my/upcoming') . '" align="top" frameborder="0" scrolling="no"></iframe>';
			}
			break;
		case 'games_today':
			$block['subject'] = '';
			$block['content'] = '<iframe name="games_iframe" id="games_iframe" width="400" height="50" src="' . _leaguerunner_url('api/1/schedule/gamestoday') . '" align="top" frameborder="0" scrolling="no"></iframe>';
			break;
		default:
			$block['content'] = t('No content available');
	}

	return $block;
}

?>
